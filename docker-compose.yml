version: "3.8"

services:
  token:
    image: token
    build: token/
    deploy:
        replicas: 2
        update_config:
            parallelism: 5
            delay: 10s
        restart_policy:
            condition: on-failure
            max_attempts: 3
            window: 120s
    ports:
        - 8080
    environment: 
    - SERVICE_PORTS=8080
    depends_on:
        - "redis"
        - "database"

  users:
    image: users
    build: users/
    ports:
    - "8081:8080"
    depends_on:
        - "database"
  
  event:
    image: event
    build: event/
    ports:
      - "8083:8080"
    depends_on:
      - "redis"

  redis:
    env_file:
      - ".env"
    image: "redis:5.0.4-stretch"
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    stop_grace_period: "${DOCKER_STOP_GRACE_PERIOD:-3s}"
    volumes:
      - "redis:/data"

  proxy:
      image: dockercloud/haproxy
      depends_on:
          - "token"
      environment:
          - BALANCE=leastconn
      volumes:
          - /var/run/docker.sock:/var/run/docker.sock
      ports:
          - "8082:80"
      deploy:
          placement:
              constraints: [node.role == manager]

  database: 
    image: "postgres" # use latest official postgres version 
    env_file: 
        - database.env # configure postgres 
    volumes: 
        - database-data:/var/lib/postgresql/data/ # persist data even if container shuts down


volumes:
  redis: {}
  database-data: # named volumes can be managed easier using docker-compose

